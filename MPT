import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# 1. Definimos el conjunto de activos (tickers)
tickers = ['NU', 'BBVA', 'TBBB','VMEX19.MX'] 

# 2. Descargamos datos históricos de precios de cierre ajustados
data = yf.download(tickers, start="2024-01-01", end="2024-09-03")['Adj Close']

# 3. Calculamos los rendimientos diarios
returns = data.pct_change().dropna()

# 4. Calculamos los rendimientos esperados y la matriz de covarianza
mean_returns = returns.mean()  # Esto debería ser una Serie con un valor por cada activo
cov_matrix = returns.cov()  # Esto es una matriz (DataFrame)

# 5. Funciones para el cálculo de performance del portafolio y optimización

def portfolio_performance(weights, mean_returns, cov_matrix):
    returns = np.dot(weights, mean_returns)
    std = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    return std, returns

def negative_sharpe_ratio(weights, mean_returns, cov_matrix, risk_free_rate=0.01):
    p_var, p_ret = portfolio_performance(weights, mean_returns, cov_matrix)
    return - (p_ret - risk_free_rate) / p_var

def max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate=0.01):
    num_assets = len(mean_returns)  # Esto debe calcular la longitud de la Serie mean_returns
    args = (mean_returns, cov_matrix, risk_free_rate)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0.0, 1.0)
    bounds = tuple(bound for asset in range(num_assets))

    result = minimize(negative_sharpe_ratio, num_assets*[1./num_assets,], args=args,
                      method='SLSQP', bounds=bounds, constraints=constraints)
    return result

def min_variance(mean_returns, cov_matrix):
    num_assets = len(mean_returns)  # Esto debe calcular la longitud de la Serie mean_returns
    args = (mean_returns, cov_matrix)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0.0, 1.0)
    bounds = tuple(bound for asset in range(num_assets))

    result = minimize(portfolio_volatility, num_assets*[1./num_assets,], args=args,
                      method='SLSQP', bounds=bounds, constraints=constraints)

    return result

def portfolio_volatility(weights, mean_returns, cov_matrix):
    return portfolio_performance(weights, mean_returns, cov_matrix)[0]

# 6. Calcular los portafolios óptimos
max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix)
min_var = min_variance(mean_returns, cov_matrix)

# 7. Performance de los portafolios
sdp, rp = portfolio_performance(max_sharpe['x'], mean_returns, cov_matrix)
sdp_min, rp_min = portfolio_performance(min_var['x'], mean_returns, cov_matrix)

# Definir los límites para cada peso (entre 0 y 1)
num_assets = len(mean_returns)
bounds = tuple((0.0, 1.0) for asset in range(num_assets))

# 8. Generar la frontera eficiente
target_returns = np.linspace(rp_min, rp, 50)
target_vols = []

for t in target_returns:
    constraints = ({'type': 'eq', 'fun': lambda x: portfolio_performance(x, mean_returns, cov_matrix)[1] - t},
                   {'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    result = minimize(portfolio_volatility, num_assets*[1./num_assets,], args=(mean_returns, cov_matrix),
                      method='SLSQP', bounds=bounds, constraints=constraints)
    target_vols.append(result['fun'])

target_vols = np.array(target_vols)

# 9. Visualización de la Frontera Eficiente
plt.figure(figsize=(10, 7))
plt.scatter(target_vols, target_returns, c=(target_returns - 0.01) / target_vols, marker='x')
plt.plot(sdp, rp, marker='*', markersize=15, color='r', label='Max Sharpe Ratio')
plt.plot(sdp_min, rp_min, marker='*', markersize=15, color='g', label='Min Volatility')

plt.title('Efficient Frontier with Real Data')
plt.xlabel('Volatility (Std. Deviation)')
plt.ylabel('Return')
plt.colorbar(label='Sharpe Ratio')
plt.legend(labelspacing=0.8)
plt.show()
